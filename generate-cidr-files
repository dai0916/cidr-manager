#!/usr/bin/env perl

use strict;
use warnings;
use Carp;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Deepcopy = 1;
$Data::Dumper::Sortkeys = 1;
use Getopt::Long;
use Pod::Usage;
use Path::Class qw(file dir);
use Digest::MD5::File qw(file_md5);
use UNIVERSAL::require;

my $Debug = 0;

my %Generator = (
    yaml => \&as_yaml,
    pair => \&as_pair,
   );

MAIN: {
    my $input_dir  = "";
    my $output_dir = "";

    Getopt::Long::Configure("bundling");
    GetOptions(
               'input_dir|i=s'  => \$input_dir,
               'output_dir|o=s' => \$output_dir,
               'debug|d+' => \$Debug,
               'help|h|?' => sub{ pod2usage(-verbose=>1) }) or pod2usage();
    -d $input_dir  || pod2usage("no such input directory: $input_dir");
    -d $output_dir || pod2usage("no such output directory: $output_dir");
    $input_dir  = dir($input_dir);
    $output_dir = dir($output_dir);

    my $cidr = read_cidrs($input_dir);
    #warn '# cidr: ',Dumper($cidr);
    generate_cidr_files($cidr, $output_dir);

    exit 0;
}

sub read_cidrs {
    my($input_dir) = @_;
    my $cidr = {};

    for my $cidr_file (grep !$_->is_dir, $input_dir->children) {
        $cidr->{ $cidr_file->basename } = [ $cidr_file->slurp( chomp => 1 ) ];
    }

    return $cidr;
}

sub generate_cidr_files {
    my($cidr, $output_dir) = @_;
    print "generate_cidr_files\n";

    while (my($name, $generator) = each %Generator) {
        print "  $name\n";
        $generator->($cidr, $output_dir->subdir($name));
    }
}

sub as_yaml {
    my($cidr, $output_dir) = @_;

    "YAML"->require;
    _write_one_file($cidr, $output_dir, sub {
                        my($fh, $cidr) = @_;
                        printf $fh YAML::Dump($cidr);
                    });
}

sub as_pair {
    my($cidr, $output_dir) = @_;

    _write_one_file($cidr, $output_dir, sub {
                        my($fh, $cidr) = @_;
                        while (my($bname, $cidrs) = each %$cidr) {
                            for my $c (@$cidrs) {
                                printf $fh "%-18s %s\n", $c, $bname;
                            }
                        }
                    });
}

sub _write_one_file {
    my($cidr, $output_dir, $write) = @_;

    -d $output_dir or $output_dir->mkpath or croak $!;

    my $file     = $output_dir->file("cidr");
    my $file_tmp = $output_dir->file("cidr".'.tmp');
    my $fh = $file_tmp->open('>', 0664) or carp $!;

    $write->($fh, $cidr);
    $fh->close;

    if ( updated_cidr($file, $file_tmp) ) {
        rename $file_tmp->stringify, $file->stringify or carp $!;
    } else {
        $file_tmp->remove or carp $!;
    }
}

sub updated_cidr {
    my($old, $new) = (shift->stringify, shift->stringify);
    return ! -e $old || file_md5($old) ne file_md5($new);
}

__END__

=head1 NAME

B<program_name> - abstract

=head1 SYNOPSIS

B<program_name> [ B<-d> ] I<file>
[ (B<-e>|-B<--expire>) I<days> ]
[  B<-n>|-B<--dry-run> ]
[ (B<-l>|-B<--limit>) I<limit> ]
[ (B<-u>|-B<--until>) I<clock_time> ]

  $ program_name file > out

=head1 DESCRIPTION

このプログラムは...

=head1 OPTIONS

=over 4

=item B<-d>

increase debug level.
-d -d more verbosely.

=back

=head1 EXIT STATUS

exit status.

=head1 RETURN VALUE

What the program or function returns, if successful. This section can
be omitted for programs whose precise exit codes aren't important,
provided they return 0 on success as is standard.  It should always be
present for functions.

=head1 ERRORS

errors.

=head1 DIAGNOSTICS

All possible messages the program can print out--and what they mean.
You may wish to follow the same documentation style as the Perl
documentation; see perldiag(1) for more details (and look at the POD
source as well).

=head1 EXAMPLES

=head2 ex1

ext1...

=head1 ENVIRONMENT

=over 6

=item HOME

Used to determine the user's home directory.

=back

=head1 FUNCTIONS

=over 4

=item B<f1>(I<$a>,I<$b>)

call from:
call out :
in :
out:

desc.

=back

=head1 FILES

=over 4

=item F</path/to/config.ph>

設定ファイル。

=back

=head1 CAVEATS

Things to take special care with, sometimes called WARNINGS.

=head1 BUGS

Things that are broken or just don't work quite right.

=head1 RESTRICTIONS

Bugs you don't plan to fix.  :-)

=head1 NOTES

Miscellaneous commentary.

=head1 SEE ALSO

L<Module::Hoge|Module::Hoge>,
ls(1), cd(1)

=head1 AUTHOR

HIROSE, Masaaki E<lt>hirose31 _at_ gmail.comE<gt>

=head1 COPYRIGHT & LICENSE

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=head1 HISTORY

=cut

# for Emacsen
# Local Variables:
# mode: cperl
# cperl-indent-level: 4
# indent-tabs-mode: nil
# coding: utf-8
# End:

# vi: set ts=4 sw=4 sts=0 :
