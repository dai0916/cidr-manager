#!/usr/bin/env perl

use strict;
use warnings;

use Carp;
use Digest::MD5::File qw(file_md5);
use Getopt::Long;
use Pod::Usage;

use Path::Class qw(file dir);
use WWW::MobileCarrierJP 0.19;
use WWW::MobileCarrierJP::DoCoMo::CIDR;
use WWW::MobileCarrierJP::EZWeb::CIDR;
use WWW::MobileCarrierJP::AirHPhone::CIDR;
use WWW::MobileCarrierJP::ThirdForce::CIDR;

my @Carriers = qw/DoCoMo EZWeb ThirdForce/;

&main;exit 9;

sub short_name_for {
    my $carrier = shift;
    +{
        DoCoMo     => 'docomo',
        EZWeb      => 'ezweb',
        AirHPhone  => 'willcom',
        ThirdForce => 'softbank',
    }->{$carrier};
}

sub main {
    my $output_dir = "";
    my $notify_to  = [];

    Getopt::Long::Configure("bundling");
    GetOptions(
               'o|output_dir=s' => \$output_dir,
               'e|email=s@'     => \$notify_to,
               'help|h|?' => sub{ pod2usage(-verbose=>1) }) or pod2usage();
    -d $output_dir || pod2usage("no such directory: $output_dir");
    $output_dir = dir($output_dir);

    my $result = scrape();

    my $exit_code = 1;
    while (my($bname, $cidrs) = each %$result) {
        my $filename     = $output_dir->file($bname);
        my $filename_tmp = $output_dir->file($bname.".tmp");

        my $fh = $filename_tmp->open('>', 0664) or do {
            carp "failed to open file: $filename_tmp: $!";
            next;
        };
        print $fh "$_\n" for sort byoctet @$cidrs;
        $fh->close;

        if ( updated_cidr($filename, $filename_tmp) ) {
            # updated cidr info
            $exit_code = 0;
            rename $filename_tmp->stringify, $filename->stringify or carp $!;

            # process_diff(
            #     carrier => $bname,
            #     url     => fixme,
            #     old     => $filename,
            #     new     => ,
            #    );

        } else {
            # not modified
            $filename_tmp->remove or carp $!;
        }
    }

    exit $exit_code;
}

sub scrape {
    my $result;
    for my $carrier (@Carriers) {
        my $class = "WWW::MobileCarrierJP::${carrier}::CIDR";
        my $dat;
        my $retry = 3;

        while ($retry-- >= 0) {
            $dat = $class->scrape;
            last if @$dat > 0;
        };
        if (@$dat <= 0) {
            carp "[ERROR] cannot scrape CIDR for $carrier";
            next;
        }
        $result->{short_name_for($carrier)} = [map { "$_->{ip}$_->{subnetmask}" } @$dat];
    }
    return $result;
}

sub byoctet {
    my $ao = [split /[.\/]/, $a];
    my $bo = [split /[.\/]/, $b];
    $ao->[0] <=> $bo->[0] or
    $ao->[1] <=> $bo->[1] or
    $ao->[2] <=> $bo->[2] or
    $ao->[3] <=> $bo->[3];
}

sub updated_cidr {
    my($old, $new) = @_;
    return ! -e $old || file_md5($old->stringify) ne file_md5($new->stringify);
}

__END__

=head1 SYNOPSIS

B<update-mobilejp-cidr> B<-o> I<OUTPUT_DIR>

    $ update-mobilejp-cidr -o /var/ip.d/plain
        output into /var/ip.d/plain/{docomo,ezweb,willcom,softbank}

    $ update-mobilejp-cidr -o /var/ip.d/plain && generate-cidr-files ...

=head1 EXIT CODE

If no update cidr then exit(1), otherwise (some cidr updated) exit(0).

fixme notify by email if -e option
