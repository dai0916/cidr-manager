#!/usr/bin/env perl

use strict;
use warnings;

use Carp;
use Getopt::Long;
use Pod::Usage;

use Digest::MD5::File qw(file_md5);
use Path::Class qw(file dir);
use Array::Diff;
use YAML;
use WWW::MobileCarrierJP 0.19;
use WWW::MobileCarrierJP::DoCoMo::CIDR;
use WWW::MobileCarrierJP::EZWeb::CIDR;
use WWW::MobileCarrierJP::AirHPhone::CIDR;
use WWW::MobileCarrierJP::ThirdForce::CIDR;

my @Carriers  = qw/DoCoMo EZWeb ThirdForce/;
my %_i2s = (
    DoCoMo     => 'docomo',
    EZWeb      => 'ezweb',
    AirHPhone  => 'willcom',
    ThirdForce => 'softbank',
   );
my %_s2i = reverse %_i2s;

&main;exit 9;

sub short_name_for {
    $_i2s{+shift};
}
sub internal_name_for {
    $_s2i{+shift};
}

sub url_for {
    my $short_name = shift;
    # assume module are already loaded
    "WWW::MobileCarrierJP::$_s2i{$short_name}::CIDR"->url;
}

sub main {
    my $output_dir       = "";
    my $notify_emailfrom = "";
    my $notify_email     = [];

    Getopt::Long::Configure("bundling");
    GetOptions(
               'o|output_dir=s' => \$output_dir,
               'f|emailfrom=s'  => \$notify_emailfrom,
               'e|email=s@'     => \$notify_email,
               'help|h|?' => sub{ pod2usage(-verbose=>1) }) or pod2usage();
    -d $output_dir || pod2usage("no such directory: $output_dir");
    $output_dir = dir($output_dir);

    my $result = scrape();

    my $exit_code = 1;
    while (my($bname, $cidrs) = each %$result) {
        my $filename     = $output_dir->file($bname);
        my $filename_tmp = $output_dir->file($bname.".tmp");

        my $fh = $filename_tmp->open('>', 0664) or do {
            carp "failed to open file: $filename_tmp: $!";
            next;
        };
        print $fh "$_\n" for sort byoctet @$cidrs;
        $fh->close;

        if ( updated_cidr($filename, $filename_tmp) ) {
            ## updated cidr info
            process_diff(
                carrier => $bname,
                url     => url_for($bname),
                old     => -e $filename ? [ $filename->slurp(chomp=>1) ] : [],
                new     => [ $filename_tmp->slurp(chomp=>1) ],
                notify  => { email => { from => $notify_emailfrom,
                                        to   => $notify_email },
                         },
               );

            $exit_code = 0;
            rename $filename_tmp->stringify, $filename->stringify or carp $!;
        } else {
            ## not modified
            $filename_tmp->remove or carp $!;
        }
    }

    exit $exit_code;
}

sub scrape {
    my $result;
    for my $carrier (@Carriers) {
        my $class = "WWW::MobileCarrierJP::${carrier}::CIDR";
        my $dat;
        my $retry = 3;

        while ($retry-- >= 0) {
            $dat = $class->scrape;
            last if @$dat > 0;
        };
        if (@$dat <= 0) {
            carp "[ERROR] cannot scrape CIDR for $carrier";
            next;
        }

        $result->{short_name_for($carrier)} = [map { "$_->{ip}$_->{subnetmask}" } @$dat];
    }
    return $result;
}

sub byoctet {
    my $ao = [split /[.\/]/, $a];
    my $bo = [split /[.\/]/, $b];
    $ao->[0] <=> $bo->[0] or
    $ao->[1] <=> $bo->[1] or
    $ao->[2] <=> $bo->[2] or
    $ao->[3] <=> $bo->[3];
}

sub updated_cidr {
    my($old, $new) = @_;
    return ! -e $old || file_md5($old->stringify) ne file_md5($new->stringify);
}

sub process_diff {
    my %p = @_;

    my $change = +{ map { $_ => $p{$_} } qw(url old new) };
    my $diff = Array::Diff->diff($p{old}, $p{new});

    if (@{ $diff->added }) {
        $change->{added} = $diff->added;
    }

    if (@{ $diff->deleted }) {
        $change->{deleted} = $diff->deleted;
    }

    my $change_text = YAML::Dump({$p{carrier} => $change});

    if (@{ $p{notify}{email}{to} } > 0) {
        notify_email($p{notify}{email}, $p{carrier}, $change_text);
    }

}

sub notify_email {
    my($addr, $carrier, $body) = @_;

    require Email::Sender::Simple;
    require Email::Simple;
    require Email::Simple::Creator;

    my $email = Email::Simple->create(
        header => [
            To         => join(', ', @{$addr->{to}}),
            From       => $addr->{from},
            Subject    => "[NOTIFY] $carrier GW IP address was updated",
            'X-Mailer' => "$0",
           ],
        body => $body,
       );

    Email::Sender::Simple->send($email);
}

__END__

=head1 SYNOPSIS

B<update-mobilejp-cidr>
B<-o> I<OUTPUT_DIR>
[ B<-f> I<FROM> B<-e> I<TO> [ B<-e> I<TO> ... ] ]

    $ update-mobilejp-cidr -o /var/ip.d/plain
        output into /var/ip.d/plain/{docomo,ezweb,willcom,softbank}

    $ update-mobilejp-cidr -o /var/ip.d/plain -f notifier@example.com -e tommy@example.com -e matsu@example.org
        if you specify -f and at least one -e option, do notify changing by email.

    $ update-mobilejp-cidr -o /var/ip.d/plain && generate-cidr-files ...
        If no update cidr then exit(1), otherwise (some cidr updated) exit(0).

=head1 EXIT CODE

If no update cidr then exit(1), otherwise (some cidr updated) exit(0).

